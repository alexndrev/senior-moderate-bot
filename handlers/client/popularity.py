from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config.config import *
from config.db import *


storage = MemoryStorage()
bot = Bot(token=token, parse_mode=parse_mode)
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(text=['+r'])
async def rCommand(message):
    await update_messages(message.from_user.full_name, message.from_user.id, message.chat.id, 1)
    await update_messagesGlobal(message.from_user.full_name, message.from_user.id, 1)
    l11n = get_localization(message.chat.id)
    match l11n:
        case 'uk':
            if not message.reply_to_message:
                await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
                return

            if message.reply_to_message.from_user.id != message.from_user.id:
                await update_popularity(message.from_user.full_name, message.from_user.id, message.chat.id, 1)
                await update_popularityGlobal(message.from_user.full_name, message.from_user.id, 1)
                await message.reply(
                    f'[–í–∏](tg://user?id={message.from_user.id}) –¥–æ–¥–∞–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å [{message.reply_to_message.from_user.full_name}](tg://user?id={message.reply_to_message.from_user.id})')
            else:
                await message.reply('–¶—è –¥—ñ—è –Ω–µ –ø—Ä–∏–ø—É—Å—Ç–∏–º–∞!')
        case _:
            if not message.reply_to_message:
                await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
                return

            if message.reply_to_message.from_user.id != message.from_user.id:
                await update_popularity(message.from_user.full_name, message.from_user.id, message.chat.id, 1)
                await update_popularityGlobal(message.from_user.full_name, message.from_user.id, 1)
                await message.reply(
                    f'[–í—ã](tg://user?id={message.from_user.id}) –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å [{message.reply_to_message.from_user.full_name}](tg://user?id={message.reply_to_message.from_user.id})')
            else:
                await message.reply('–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ!')


@dp.message_handler(commands="—Ä–µ–π—Ç–∏–Ω–≥", commands_prefix='!')
async def dashboardCommand(message):
    await update_messages(message.from_user.full_name, message.from_user.id, message.chat.id, 1)
    await update_messagesGlobal(message.from_user.full_name, message.from_user.id, 1)
    l11n = get_localization(message.chat.id)
    match l11n:
        case 'uk':
            leadermsg = 'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–ò–• –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í –ß–ê–¢–£\n\n'
            parsed = db[f"{message.chat.id}"].find().sort("count_messages", -1).limit(10)
            for j in range(1):
                for user in parsed:
                    j += 1
                    names = f"{user['full_name']}"
                    leadermsg += f" {j}. {names} ‚Äî {user['count_messages']}\n"
                    """fl3 = leadermsg.replace(" 3.", " ü•â|")
                    fl2 = fl3.replace(" 2.", " ü•à|")
                    fl = fl2.replace(" 1.", " ü•á|")"""
            await message.reply(str(leadermsg), disable_web_page_preview=True, parse_mode='html')
        case _:
            leadermsg = 'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–©–ò–¢–ï–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ß–ê–¢–ê\n\n'
            parsed = db[f"{message.chat.id}"].find().sort("count_messages", -1).limit(10)
            for j in range(1):
                for user in parsed:
                    j += 1
                    names = f"{user['full_name']}"
                    leadermsg += f" {j}. {names} ‚Äî {user['count_messages']}\n"
                    """fl3 = leadermsg.replace(" 3.", " ü•â|")
                    fl2 = fl3.replace(" 2.", " ü•à|")
                    fl = fl2.replace(" 1.", " ü•á|")"""
            await message.reply(str(leadermsg), disable_web_page_preview=True, parse_mode='html')


def register_handlers_popularity(dp: Dispatcher):
    dp.register_message_handler(rCommand, text=['+r'])
    dp.register_message_handler(dashboardCommand, commands="—Ä–µ–π—Ç–∏–Ω–≥", commands_prefix='/!')
